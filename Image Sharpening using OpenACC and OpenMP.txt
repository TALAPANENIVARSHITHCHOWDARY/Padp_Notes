/*
 * Image Sharpening using OpenACC with Laplacian Variance
 *
 * This program applies a sharpening filter using OpenACC for GPU acceleration.
 * It also calculates the Laplacian variance to measure sharpness before and after processing.
 *
 * Compilation:
 * - OpenACC: gcc -fopenacc -o openacc_sharpen openacc_sharpen.c -lm -lpng -ljpeg
 *
 * Usage:
 * - ./openacc_sharpen input.png output.png
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <openacc.h>
#include <time.h>
#include <png.h>

// Sharpening Kernel
float kernel[3][3] = {
    {  0, -1,  0 },
    { -1,  5, -1 },
    {  0, -1,  0 }
};

void apply_filter_openacc(unsigned char *input, unsigned char *output, int width, int height) {
    #pragma acc data copyin(input[0:width*height*3]) copyout(output[0:width*height*3])
    {
        #pragma acc parallel loop collapse(2)
        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {
                for (int c = 0; c < 3; c++) {
                    float sum = 0.0;
                    for (int ky = -1; ky <= 1; ky++) {
                        for (int kx = -1; kx <= 1; kx++) {
                            sum += input[((y + ky) * width + (x + kx)) * 3 + c] * kernel[ky + 1][kx + 1];
                        }
                    }
                    output[(y * width + x) * 3 + c] = fmin(fmax(sum, 0), 255);
                }
            }
        }
    }
}

// Convert RGB image to grayscale
void rgb_to_grayscale(unsigned char *rgb, unsigned char *gray, int width, int height) {
    for (int i = 0; i < width * height; i++) {
        gray[i] = (rgb[i * 3] * 0.299) + (rgb[i * 3 + 1] * 0.587) + (rgb[i * 3 + 2] * 0.114);
    }
}

// Compute Laplacian variance (sharpness measure)
double compute_laplacian_variance(unsigned char *gray, int width, int height) {
    int laplacian[3][3] = {
        { 0,  1,  0 },
        { 1, -4,  1 },
        { 0,  1,  0 }
    };
    double sum = 0.0, sum_sq = 0.0;
    int pixel_count = 0;

    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            double lap_value = 0.0;
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    lap_value += gray[(y + ky) * width + (x + kx)] * laplacian[ky + 1][kx + 1];
                }
            }
            sum += lap_value;
            sum_sq += lap_value * lap_value;
            pixel_count++;
        }
    }
    double mean = sum / pixel_count;
    return (sum_sq / pixel_count) - (mean * mean);
}

// Load PNG image
void load_png(const char *filename, unsigned char **image, int *width, int *height) {
    FILE *fp = fopen(filename, "rb");
    if (!fp) {
        printf("Error: Unable to open image file.\n");
        exit(1);
    }
    png_structp png = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    png_infop info = png_create_info_struct(png);
    png_init_io(png, fp);
    png_read_info(png, info);
    *width = png_get_image_width(png, info);
    *height = png_get_image_height(png, info);
    png_set_strip_alpha(png);
    png_set_palette_to_rgb(png);
    png_set_gray_to_rgb(png);
    png_read_update_info(png, info);
    *image = (unsigned char *)malloc((*width) * (*height) * 3);
    png_bytep row_pointers[*height];
    for (int y = 0; y < *height; y++) {
        row_pointers[y] = *image + y * (*width) * 3;
    }
    png_read_image(png, row_pointers);
    fclose(fp);
    png_destroy_read_struct(&png, &info, NULL);
}

int main(int argc, char **argv) {
    if (argc != 3) {
        printf("Usage: %s <input.png> <output.png>\n", argv[0]);
        return 1;
    }
    unsigned char *image, *output;
    int width, height;
    load_png(argv[1], &image, &width, &height);
    output = (unsigned char*)malloc(width * height * 3);
    
    unsigned char *gray = (unsigned char*)malloc(width * height);
    rgb_to_grayscale(image, gray, width, height);
    double sharpness_before = compute_laplacian_variance(gray, width, height);
    
    double start_time = clock();
    apply_filter_openacc(image, output, width, height);
    double end_time = clock();
    double execution_time = (end_time - start_time) / CLOCKS_PER_SEC;
    
    rgb_to_grayscale(output, gray, width, height);
    double sharpness_after = compute_laplacian_variance(gray, width, height);
    
    printf("Sharpness before: %f\n", sharpness_before);
    printf("Sharpness after: %f\n", sharpness_after);
    printf("OpenACC Execution Time: %f seconds\n", execution_time);
    
    free(image);
    free(output);
    free(gray);
    return 0;
}


-------------------------------------------------------------------------------------------------




/*
 * Image Sharpening using OpenMP with Laplacian Variance
 *
 * This implementation applies a sharpening filter using OpenMP for parallelization.
 * It calculates the Laplacian variance before and after processing to measure sharpness.
 *
 * Compilation:
 * - OpenMP: gcc -fopenmp -o openmp_sharpen openmp_sharpen.c -lm -lpng
 *
 * Usage:
 * - ./openmp_sharpen input.png output.png
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <omp.h>
#include <time.h>
#include <png.h>

// Sharpening Kernel
float kernel[3][3] = {
    {  0, -1,  0 },
    { -1,  5, -1 },
    {  0, -1,  0 }
};

void apply_filter_openmp(unsigned char *input, unsigned char *output, int width, int height) {
    #pragma omp parallel for collapse(2)
    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            for (int c = 0; c < 3; c++) {
                float sum = 0.0;
                for (int ky = -1; ky <= 1; ky++) {
                    for (int kx = -1; kx <= 1; kx++) {
                        sum += input[((y + ky) * width + (x + kx)) * 3 + c] * kernel[ky + 1][kx + 1];
                    }
                }
                output[(y * width + x) * 3 + c] = fmin(fmax(sum, 0), 255);
            }
        }
    }
}

// Convert RGB image to grayscale
void rgb_to_grayscale(unsigned char *rgb, unsigned char *gray, int width, int height) {
    #pragma omp parallel for
    for (int i = 0; i < width * height; i++) {
        gray[i] = (rgb[i * 3] * 0.299) + (rgb[i * 3 + 1] * 0.587) + (rgb[i * 3 + 2] * 0.114);
    }
}

// Compute Laplacian variance
double compute_laplacian_variance(unsigned char *gray, int width, int height) {
    int laplacian[3][3] = {
        { 0,  1,  0 },
        { 1, -4,  1 },
        { 0,  1,  0 }
    };
    double sum = 0.0, sum_sq = 0.0;
    int pixel_count = 0;

    #pragma omp parallel for reduction(+:sum, sum_sq, pixel_count)
    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            double lap_value = 0.0;
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    lap_value += gray[(y + ky) * width + (x + kx)] * laplacian[ky + 1][kx + 1];
                }
            }
            sum += lap_value;
            sum_sq += lap_value * lap_value;
            pixel_count++;
        }
    }
    double mean = sum / pixel_count;
    return (sum_sq / pixel_count) - (mean * mean);
}

// Load PNG image
void load_png(const char *filename, unsigned char **image, int *width, int *height) {
    FILE *fp = fopen(filename, "rb");
    if (!fp) {
        printf("Error: Unable to open image file.\n");
        exit(1);
    }
    png_structp png = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    png_infop info = png_create_info_struct(png);
    png_init_io(png, fp);
    png_read_info(png, info);
    *width = png_get_image_width(png, info);
    *height = png_get_image_height(png, info);
    png_set_strip_alpha(png);
    png_set_palette_to_rgb(png);
    png_set_gray_to_rgb(png);
    png_read_update_info(png, info);
    *image = (unsigned char *)malloc((*width) * (*height) * 3);
    png_bytep row_pointers[*height];
    for (int y = 0; y < *height; y++) {
        row_pointers[y] = *image + y * (*width) * 3;
    }
    png_read_image(png, row_pointers);
    fclose(fp);
    png_destroy_read_struct(&png, &info, NULL);
}

int main(int argc, char **argv) {
    if (argc != 3) {
        printf("Usage: %s <input.png> <output.png>\n", argv[0]);
        return 1;
    }
    unsigned char *image, *output;
    int width, height;
    load_png(argv[1], &image, &width, &height);
    output = (unsigned char*)malloc(width * height * 3);
    
    unsigned char *gray = (unsigned char*)malloc(width * height);
    rgb_to_grayscale(image, gray, width, height);
    double sharpness_before = compute_laplacian_variance(gray, width, height);
    
    double start_time = omp_get_wtime();
    apply_filter_openmp(image, output, width, height);
    double end_time = omp_get_wtime();
    double execution_time = end_time - start_time;
    
    rgb_to_grayscale(output, gray, width, height);
    double sharpness_after = compute_laplacian_variance(gray, width, height);
    
    printf("Sharpness before: %f\n", sharpness_before);
    printf("Sharpness after: %f\n", sharpness_after);
    printf("OpenMP Execution Time: %f seconds\n", execution_time);
    
    free(image);
    free(output);
    free(gray);
    return 0;
}